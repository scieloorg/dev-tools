#!/usr/bin/env python3
"""
Auto Profiler - An√°lise autom√°tica de performance e mem√≥ria
Depend√™ncias m√≠nimas: apenas bibliotecas padr√£o do Python
"""

import cProfile
import pstats
import tracemalloc
import time
import functools
import sys
import io
from pathlib import Path
from collections import defaultdict
from contextlib import contextmanager
import linecache
import os

class AutoProfiler:
    """Analisador autom√°tico de performance e mem√≥ria"""
    
    def __init__(self, 
                 top_functions=10,
                 memory_threshold_mb=1.0,
                 time_threshold_seconds=0.1):
        """
        Args:
            top_functions: N√∫mero de fun√ß√µes a mostrar
            memory_threshold_mb: Limiar para reportar uso de mem√≥ria
            time_threshold_seconds: Limiar para reportar tempo de execu√ß√£o
        """
        self.top_functions = top_functions
        self.memory_threshold_mb = memory_threshold_mb
        self.time_threshold_seconds = time_threshold_seconds
        self.profile_data = {}
        self.memory_snapshots = []
        
    def profile(self, func=None, label=None):
        """Decorator/context manager para profiling autom√°tico"""
        if func is None:
            return self._profile_context(label)
        return self._profile_decorator(func)
    
    def _profile_decorator(self, func):
        """Decorator para fun√ß√µes"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            label = f"{func.__module__}.{func.__name__}"
            
            # Inicia profiling de mem√≥ria
            tracemalloc.start()
            mem_before = tracemalloc.get_traced_memory()[0]
            
            # Inicia profiling de tempo
            profiler = cProfile.Profile()
            profiler.enable()
            start_time = time.perf_counter()
            
            try:
                # Executa fun√ß√£o
                result = func(*args, **kwargs)
                
                # Para profiling
                end_time = time.perf_counter()
                profiler.disable()
                mem_after = tracemalloc.get_traced_memory()[0]
                
                # Salva dados
                self._save_profile_data(
                    label, 
                    profiler, 
                    end_time - start_time,
                    (mem_after - mem_before) / 1024 / 1024  # MB
                )
                
                return result
                
            finally:
                tracemalloc.stop()
                
        return wrapper
    
    @contextmanager
    def _profile_context(self, label):
        """Context manager para blocos de c√≥digo"""
        if label is None:
            label = "code_block"
            
        # Inicia profiling
        tracemalloc.start()
        mem_before = tracemalloc.get_traced_memory()[0]
        profiler = cProfile.Profile()
        profiler.enable()
        start_time = time.perf_counter()
        
        try:
            yield
        finally:
            # Para profiling
            end_time = time.perf_counter()
            profiler.disable()
            mem_after = tracemalloc.get_traced_memory()[0]
            tracemalloc.stop()
            
            # Salva dados
            self._save_profile_data(
                label,
                profiler,
                end_time - start_time,
                (mem_after - mem_before) / 1024 / 1024
            )
    
    def _save_profile_data(self, label, profiler, total_time, memory_mb):
        """Salva dados do profiling"""
        self.profile_data[label] = {
            'profiler': profiler,
            'total_time': total_time,
            'memory_mb': memory_mb
        }
    
    def analyze_and_report(self):
        """Analisa todos os dados e gera relat√≥rio"""
        if not self.profile_data:
            print("Nenhum dado de profiling encontrado!")
            return
            
        print("\n" + "="*70)
        print("RELAT√ìRIO DE AN√ÅLISE AUTOM√ÅTICA")
        print("="*70)
        
        # Resumo geral
        self._print_summary()
        
        # Problemas identificados
        problems = self._identify_problems()
        if problems:
            self._print_problems(problems)
        
        # Detalhes por fun√ß√£o
        self._print_detailed_analysis()
        
        # Recomenda√ß√µes
        self._print_recommendations(problems)
    
    def _print_summary(self):
        """Imprime resumo geral"""
        print("\nüìä RESUMO GERAL:")
        print("-" * 50)
        
        total_time = sum(d['total_time'] for d in self.profile_data.values())
        total_memory = sum(d['memory_mb'] for d in self.profile_data.values())
        
        print(f"Tempo total: {total_time:.3f}s")
        print(f"Mem√≥ria total: {total_memory:.2f}MB")
        print(f"Fun√ß√µes analisadas: {len(self.profile_data)}")
    
    def _identify_problems(self):
        """Identifica problemas de performance e mem√≥ria"""
        problems = {
            'slow_functions': [],
            'memory_hungry': [],
            'frequent_calls': [],
            'inefficient': []
        }
        
        for label, data in self.profile_data.items():
            # Fun√ß√µes lentas
            if data['total_time'] > self.time_threshold_seconds:
                problems['slow_functions'].append({
                    'function': label,
                    'time': data['total_time']
                })
            
            # Alto uso de mem√≥ria
            if data['memory_mb'] > self.memory_threshold_mb:
                problems['memory_hungry'].append({
                    'function': label,
                    'memory': data['memory_mb']
                })
            
            # Analisa estat√≠sticas detalhadas
            stats = pstats.Stats(data['profiler'])
            stats.sort_stats('cumulative')
            
            # Identifica chamadas frequentes
            for func_info, (cc, nc, tt, ct, callers) in stats.stats.items():
                if nc > 10000:  # Mais de 10k chamadas
                    problems['frequent_calls'].append({
                        'function': self._format_func_name(func_info),
                        'calls': nc,
                        'total_time': ct
                    })
                
                # Identifica fun√ß√µes ineficientes (muito tempo por chamada)
                if nc > 0 and (ct / nc) > 0.001:  # Mais de 1ms por chamada
                    problems['inefficient'].append({
                        'function': self._format_func_name(func_info),
                        'time_per_call': ct / nc,
                        'total_calls': nc
                    })
        
        return problems
    
    def _print_problems(self, problems):
        """Imprime problemas identificados"""
        print("\nüö® PROBLEMAS IDENTIFICADOS:")
        print("-" * 50)
        
        # Fun√ß√µes lentas
        if problems['slow_functions']:
            print("\n‚è±Ô∏è  Fun√ß√µes Lentas (>{:.2f}s):".format(self.time_threshold_seconds))
            for p in sorted(problems['slow_functions'], key=lambda x: x['time'], reverse=True)[:5]:
                print(f"   ‚Ä¢ {p['function']}: {p['time']:.3f}s")
        
        # Alto uso de mem√≥ria
        if problems['memory_hungry']:
            print("\nüíæ Alto Uso de Mem√≥ria (>{:.1f}MB):".format(self.memory_threshold_mb))
            for p in sorted(problems['memory_hungry'], key=lambda x: x['memory'], reverse=True)[:5]:
                print(f"   ‚Ä¢ {p['function']}: {p['memory']:.2f}MB")
        
        # Chamadas frequentes
        if problems['frequent_calls']:
            print("\nüîÑ Fun√ß√µes com Muitas Chamadas (>10k):")
            unique_funcs = {}
            for p in problems['frequent_calls']:
                key = p['function']
                if key not in unique_funcs or p['calls'] > unique_funcs[key]['calls']:
                    unique_funcs[key] = p
            
            for p in sorted(unique_funcs.values(), key=lambda x: x['calls'], reverse=True)[:5]:
                print(f"   ‚Ä¢ {p['function']}: {p['calls']:,} chamadas ({p['total_time']:.3f}s total)")
        
        # Fun√ß√µes ineficientes
        if problems['inefficient']:
            print("\n‚ö†Ô∏è  Fun√ß√µes Ineficientes (>1ms/chamada):")
            unique_funcs = {}
            for p in problems['inefficient']:
                key = p['function']
                if key not in unique_funcs or p['time_per_call'] > unique_funcs[key]['time_per_call']:
                    unique_funcs[key] = p
            
            for p in sorted(unique_funcs.values(), key=lambda x: x['time_per_call'], reverse=True)[:5]:
                print(f"   ‚Ä¢ {p['function']}: {p['time_per_call']*1000:.2f}ms/chamada ({p['total_calls']} chamadas)")
    
    def _print_detailed_analysis(self):
        """Imprime an√°lise detalhada por fun√ß√£o"""
        print("\nüìà AN√ÅLISE DETALHADA:")
        print("-" * 50)
        
        for label, data in sorted(self.profile_data.items(), 
                                 key=lambda x: x[1]['total_time'], 
                                 reverse=True):
            print(f"\n‚ñ∂ {label}")
            print(f"  Tempo: {data['total_time']:.3f}s | Mem√≥ria: {data['memory_mb']:.2f}MB")
            
            # Top fun√ß√µes internas
            stats = pstats.Stats(data['profiler'])
            stats.sort_stats('cumulative')
            
            # Captura sa√≠da
            old_stdout = sys.stdout
            sys.stdout = io.StringIO()
            stats.print_stats(5)
            output = sys.stdout.getvalue()
            sys.stdout = old_stdout
            
            # Processa e exibe apenas linhas relevantes
            lines = output.split('\n')
            for line in lines[5:10]:  # Pula cabe√ßalho
                if line.strip():
                    # Simplifica sa√≠da
                    parts = line.split()
                    if len(parts) >= 6:
                        calls = parts[0]
                        time = parts[2]
                        func = ' '.join(parts[5:])
                        if float(time) > 0.001:  # S√≥ mostra se > 1ms
                            print(f"    - {func}: {time}s ({calls} calls)")
    
    def _print_recommendations(self, problems):
        """Gera recomenda√ß√µes baseadas nos problemas"""
        print("\nüí° RECOMENDA√á√ïES:")
        print("-" * 50)
        
        recommendations = []
        
        # Recomenda√ß√µes para fun√ß√µes lentas
        if problems['slow_functions']:
            recommendations.append(
                "‚Ä¢ Otimize as fun√ß√µes lentas usando algoritmos mais eficientes ou cache"
            )
        
        # Recomenda√ß√µes para mem√≥ria
        if problems['memory_hungry']:
            recommendations.append(
                "‚Ä¢ Considere processar dados em chunks ou usar geradores para reduzir mem√≥ria"
            )
        
        # Recomenda√ß√µes para chamadas frequentes
        if problems['frequent_calls']:
            recommendations.append(
                "‚Ä¢ Use memoiza√ß√£o ou cache para fun√ß√µes chamadas frequentemente"
            )
            recommendations.append(
                "‚Ä¢ Considere vetoriza√ß√£o com NumPy para opera√ß√µes repetitivas"
            )
        
        # Recomenda√ß√µes para fun√ß√µes ineficientes
        if problems['inefficient']:
            recommendations.append(
                "‚Ä¢ Revise fun√ß√µes com alto tempo por chamada - poss√≠vel complexidade O(n¬≤) ou pior"
            )
        
        if recommendations:
            for rec in recommendations:
                print(rec)
        else:
            print("‚úÖ Nenhum problema significativo encontrado!")
    
    def _format_func_name(self, func_info):
        """Formata nome da fun√ß√£o de forma leg√≠vel"""
        filename, line, func_name = func_info
        if filename.startswith('<'):
            return func_name
        return f"{Path(filename).name}:{line}({func_name})"
    
    def save_report(self, filename="profiling_report.txt"):
        """Salva relat√≥rio em arquivo"""
        old_stdout = sys.stdout
        try:
            with open(filename, 'w') as f:
                sys.stdout = f
                self.analyze_and_report()
        finally:
            sys.stdout = old_stdout
        
        # Print ap√≥s restaurar stdout
        print(f"\nüìÑ Relat√≥rio salvo em: {filename}")


# Fun√ß√£o auxiliar para profile r√°pido
def quick_profile(func):
    """Decorator para profiling r√°pido de uma fun√ß√£o"""
    profiler = AutoProfiler()
    wrapped = profiler.profile(func)
    
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = wrapped(*args, **kwargs)
        profiler.analyze_and_report()
        return result
    
    return wrapper


# Exemplo de uso
if __name__ == "__main__":
    import random
    
    # Cria profiler
    profiler = AutoProfiler(
        top_functions=5,
        memory_threshold_mb=0.5,
        time_threshold_seconds=0.05
    )
    
    # Exemplo 1: Fun√ß√£o com problema de performance
    @profiler.profile
    def processar_lista_ineficiente(n=10000):
        """Exemplo de c√≥digo ineficiente"""
        resultado = []
        for i in range(n):
            # Opera√ß√£o O(n¬≤) - append em lista √© O(1) mas o loop aninhado n√£o
            temp = []
            for j in range(100):
                temp.append(i * j)
            resultado.append(sum(temp))
        return resultado
    
    # Exemplo 2: Fun√ß√£o com uso excessivo de mem√≥ria
    @profiler.profile
    def criar_matriz_grande(size=1000):
        """Exemplo de alto uso de mem√≥ria"""
        matriz = [[random.random() for _ in range(size)] for _ in range(size)]
        return sum(sum(linha) for linha in matriz)
    
    # Exemplo 3: Usando context manager
    with profiler.profile(label="processamento_complexo"):
        # Simula processamento
        dados = [i**2 for i in range(50000)]
        resultado = sum(dados) / len(dados)
    
    # Executa fun√ß√µes
    print("Executando an√°lise...")
    processar_lista_ineficiente(5000)
    criar_matriz_grande(500)
    
    # Gera relat√≥rio
    profiler.analyze_and_report()
    
    # Salva em arquivo
    profiler.save_report()